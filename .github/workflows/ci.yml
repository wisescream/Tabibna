name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  api-tests:
    name: API tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Start DB via docker compose
        run: |
          docker compose up -d db
          # Give MySQL a moment to accept connections
          sleep 10

      - name: Install deps and build API
        working-directory: ./api
        run: |
          npm ci
          npx prisma generate
          npx prisma migrate deploy
          npm run build

      - name: Start API (background)
        working-directory: ./api
        env:
          PORT: 4000
          NODE_ENV: test
          DATABASE_URL: mysql://root:rootpass@localhost:3307/tabibna_dev
          JWT_PRIVATE_KEY: ${{ secrets.JWT_PRIVATE_KEY }}
          JWT_PUBLIC_KEY: ${{ secrets.JWT_PUBLIC_KEY }}
          PAYMENT_WEBHOOK_SECRET: ${{ secrets.PAYMENT_WEBHOOK_SECRET }}
          SMS_WEBHOOK_SECRET: ${{ secrets.SMS_WEBHOOK_SECRET }}
        run: |
          nohup node dist/index.js > ../api.log 2>&1 & echo $! > ../api.pid

      - name: Wait for API health
        run: |
          for i in {1..30}; do
            if curl -fsS http://localhost:4000/health > /dev/null; then
              echo "API is healthy"; exit 0; fi; sleep 2; done
          echo "API did not become healthy in time"; cat api.log || true; exit 1

      - name: Run API tests
        working-directory: ./api
        env:
          API_URL: http://localhost:4000
          PAYMENT_WEBHOOK_SECRET: ${{ secrets.PAYMENT_WEBHOOK_SECRET }}
        run: |
          npm test --silent

      - name: Tear down
        if: always()
        run: |
          if [ -f api.pid ]; then kill $(cat api.pid) || true; fi
          docker compose down -v

  build-and-push:
    name: Build and push API image
    needs: api-tests
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}-api
          tags: |
            type=sha
            type=raw,value=latest

      - name: Build and push API image
        uses: docker/build-push-action@v6
        with:
          context: ./api
          file: ./api/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  trivy-scan:
    name: Trivy scan (HIGH/CRITICAL fail)
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Install Trivy
        uses: aquasecurity/setup-trivy@v0.2.2
      - name: Pull image
        run: docker pull ghcr.io/${{ github.repository }}-api:latest
      - name: Scan image
        run: |
          trivy image --exit-code 1 --severity HIGH,CRITICAL --no-progress ghcr.io/${{ github.repository }}-api:latest
